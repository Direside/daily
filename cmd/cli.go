package cmd

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"regexp"
	"time"

	"github.com/spf13/cobra"
)

type standup struct {
	name    string
	section []section
	date    time.Time
}

type section struct {
	name     string
	projects []project
}

type project struct {
	name  string
	tasks []string
}

func printSlackFriendly(s standup, p string) {
	fmt.Printf("## Standup for %s\n\n", p)
	for _, section := range s.section {
		if len(section.projects) != 0 {
			// Only print if section has content.
			fmt.Printf("*%s*:\n", section.name)
		}
		for _, project := range section.projects {
			if project.name == p {
				for _, task := range project.tasks {
					fmt.Printf("- %s\n", task)
				}
			}
			if p == "ALL" {
				for _, task := range project.tasks {
					fmt.Printf("- [%s] %s\n", project.name, task)
				}
			}
		}
		fmt.Println()
	}
	fmt.Println("_generated by daily cli tool_")
}

func (s *standup) extractStandupInfo(line string) {
	h1 := regexp.MustCompile("# (.+)")
	h2 := regexp.MustCompile("## (.+)")

	li := regexp.MustCompile("- (.+)")
	sli := regexp.MustCompile("  - (.+)")

	// Skip blank lines
	if len(line) == 0 {
		// Skip blank lines.
	} else if string(line[0]) == "#" {
		// Check Headers
		if string(line[1]) == "#" {
			// H2 - Project
			match := h2.FindStringSubmatch(line)
			sect := section{
				name: match[1],
			}
			s.section = append(s.section, sect)
		} else {
			// H1 - Person's name
			match := h1.FindStringSubmatch(line)
			s.name = match[1]
		}
	} else if string(line[0]) == "-" {
		// Project
		match := li.FindStringSubmatch(line)
		proj := project{
			name: match[1],
		}
		s.section[len(s.section)-1].projects = append(s.section[len(s.section)-1].projects, proj)
	} else if string(line[2]) == "-" {
		// Task
		match := sli.FindStringSubmatch(line)
		s.section[len(s.section)-1].projects[len(s.section[len(s.section)-1].projects)-1].tasks = append(s.section[len(s.section)-1].projects[len(s.section[len(s.section)-1].projects)-1].tasks, match[1])
	}
}

func readStandUpFile(filename string) standup {

	file, err := os.Open("../standup/standup.md")

	if err != nil {
		log.Fatalf("failed opening file: %s", err)
	}

	scanner := bufio.NewScanner(file)
	scanner.Split(bufio.ScanLines)
	s := standup{
		date: time.Now(),
	}

	for scanner.Scan() {
		s.extractStandupInfo(scanner.Text())
	}

	err = file.Close()
	if err != nil {
		log.Fatalf("Failed to close file: %s", err)
	}

	fmt.Printf("%v", s)

	printSlackFriendly(s, "Procurify")

	return s
}

var rootCmd = &cobra.Command{
	Use:   "dailycli",
	Short: "Daily is a standup markdown parser",
	Long:  `Takes a simple markdown file and generates a standup report from it for posting to Slack (for now)`,
	Run: func(cmd *cobra.Command, args []string) {
		readStandUpFile("../standup/standup.md")
	},
}

// Execute runs the above rootCmd. This is part of the viper framework.
func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
